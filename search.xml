<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在win10中使用终端默认打开powershell</title>
      <link href="/2023/08/22/zai-win10-zhong-shi-yong-zhong-duan-mo-ren-da-kai-powershell/"/>
      <url>/2023/08/22/zai-win10-zhong-shi-yong-zhong-duan-mo-ren-da-kai-powershell/</url>
      
        <content type="html"><![CDATA[<p><a href="https://learn.microsoft.com/zh-cn/windows/terminal/install">Windows 终端安装 | Microsoft Learn</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scoop包管理器</title>
      <link href="/2023/08/20/scoop-bao-guan-li-qi/"/>
      <url>/2023/08/20/scoop-bao-guan-li-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="在Windows上使用包管理器">在Windows上使用包管理器</h2><p><img src="/images/scoop%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/image-20230820143944100.png" alt="scoop首页"></p><h2 id="配置环境变量">配置环境变量</h2><p>在$env:SCOOP='<code>填写windows路径</code>'</p><pre class=" language-powershell"><code class="language-powershell"><span class="token variable">$env</span>:SCOOP=<span class="token string">'D:\Scoop'</span><span class="token namespace">[Environment]</span>::SetEnvironmentVariable<span class="token punctuation">(</span><span class="token string">'SCOOP'</span><span class="token punctuation">,</span> <span class="token variable">$env</span>:SCOOP<span class="token punctuation">,</span> <span class="token string">'User'</span><span class="token punctuation">)</span></code></pre><h2 id="下载安装">下载安装</h2><p>配置完环境变量后使用命令行进行安装</p><pre class=" language-powershell"><code class="language-powershell"><span class="token function">iwr</span> <span class="token operator">-</span>useb get<span class="token punctuation">.</span>scoop<span class="token punctuation">.</span>sh <span class="token punctuation">|</span> <span class="token function">iex</span></code></pre><p>安装完成后在配置路径下查看</p><p><img src="/images/scoop%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/image-20230820152814260.png" alt="文件夹详情"></p><p>使用常用命令查看一些信息:</p><ul class="lvl-0"><li class="lvl-2"><p>search——搜索仓库中是否有相应软件。</p></li><li class="lvl-2"><p>install——安装软件。</p></li><li class="lvl-2"><p>uninstall——卸载软件。</p></li><li class="lvl-2"><p>update——更新软件。可通过<code>scoop update *</code>更新所有已安装软件，或通过<code>scoop update</code>更新所有软件仓库资料及Scoop自身而不更新软件。</p></li><li class="lvl-2"><p>hold——锁定软件阻止其更新。</p></li><li class="lvl-2"><p>info——查询软件简要信息。</p></li><li class="lvl-2"><p>home——打开浏览器进入软件官网。</p></li></ul><h2 id="安装软件">安装软件</h2><p>可以在官网搜索想要的软件, 如果有则直接进行命令行安装,安装的文件都在<code>apps</code>文件夹下并且一些软件会自动配置环境变量,一些软件比如7zip需要用到右键进行压缩和解压需要添加注册表则安装的文件夹下会有<code>install-context.reg</code>文件双击进行安装删除也有对应的<code>uninstall-context.reg</code></p><p>缺点:需要配置镜像或者代理要不然可能下载很慢,使用<code>scoop config proxy 127.0.0.1:7890</code>将代理改为clash</p><p>本文参考自:<a href="https://zhuanlan.zhihu.com/p/463284082">Scoop——也许是Windows平台最好用的软件（包）管理器 - 知乎</a>, 仅供自己学习使用</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java开发知识点</title>
      <link href="/2023/08/03/java-kai-fa-zhi-shi-dian/"/>
      <url>/2023/08/03/java-kai-fa-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<h2 id="java基础">java基础</h2><h3 id="反射">反射</h3><h4 id="如何通过反射获取和设置对象私有字段的值？">如何通过反射获取和设置对象私有字段的值？</h4><p>可以通过类对象的getDeclaredField()方法字段（Field）对象，然后再通过字段对象的setAccessible(true)将其设置为可以访问，接下来就可以通过get/set方法来获取/设置字段的值了。</p><p>下面的代码实现了一个反射的工具类，其中的两个静态方法分别用于获取和设置私有字段的值，字段可以是基本类型也可以是对象类型且支持多级对象操作。</p><p>例如ReflectionUtil.get(dog,"owner.car.engine.id");可以获得dog对象的主人的汽车的引擎的ID号。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Modifier<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** 反射工具类**/</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectionUtil</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token function">ReflectionUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** 通过反射取对象指定字段(属性)的值* @param target 目标对象* @param fieldName 字段的名字* @throws 如果取不到对象指定字段的值则抛出异常* @return 字段的值*/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getValue</span><span class="token punctuation">(</span>Object target<span class="token punctuation">,</span> String fieldName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> fs <span class="token operator">=</span> fieldName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Field f <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                target <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>                clazz <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Field f <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fs<span class="token punctuation">[</span>fs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** 通过反射给对象的指定字段赋值* @param target 目标对象* @param fieldName 字段的名称* @param value 值*/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span>Object target<span class="token punctuation">,</span> String fieldName<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> fs <span class="token operator">=</span> fieldName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Field f <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object val <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span>                        f<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    c<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    val <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                target <span class="token operator">=</span> val<span class="token punctuation">;</span>                clazz <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Field f <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fs<span class="token punctuation">[</span>fs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="如何通过反射调用对象的方法？">如何通过反射调用对象的方法？</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MethodInvokeTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        Method m <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"toUpperCase"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// HELLO</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="死锁与活锁的区别，死锁与饥饿的区别？">死锁与活锁的区别，死锁与饥饿的区别？</h3><blockquote><p>死锁：是指两个或两个以上的进程（或线程）在执行过程中，因争夺资源而造成 的一种互相等待的现象，若无外力作用，它们都将无法推进下去。</p></blockquote><h4 id="产生死锁的必要条件：">产生死锁的必要条件：</h4><ol><li class="lvl-3"><p>互斥条件：所谓互斥就是进程在某一时间内独占资源。</p></li><li class="lvl-3"><p>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</p></li><li class="lvl-3"><p>不剥夺条件 :进程已获得资源，在末使用完之前，不能强行剥夺。</p></li><li class="lvl-3"><p>循环等待条件 :若干进程之间形成一种头尾相接的循环等待资源关系。</p></li></ol><blockquote><p>活锁：任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试， 失败，尝试，失败。</p></blockquote><p>活锁和死锁的区别在于，处于活锁的实体是在不断的改变状态，所谓的“活”，而处于死锁的实体表现为等待；活锁有可能自行解开，死锁则不能。</p><h2 id="mysql">mysql</h2><h3 id="MySQL-中有哪几种锁？">MySQL 中有哪几种锁？</h3><ol><li class="lvl-3"><p>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。</p></li><li class="lvl-3"><p>行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</p></li><li class="lvl-3"><p>页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</p></li></ol><h3 id="锁的优化策略">锁的优化策略</h3><ol><li class="lvl-3"><p>读写分离</p></li><li class="lvl-3"><p>分段加锁</p></li><li class="lvl-3"><p>减少锁持有的时间</p></li><li class="lvl-3"><p>多个线程尽量以相同的顺序去获取资源 不能将锁的粒度过于细化，不然可能会出现线程的加锁和释放次数过多，反而效 率不如一次加一把大锁。</p></li></ol><h3 id="实践中如何优化-MySQL">实践中如何优化 MySQL</h3><p>最好是按照以下顺序优化：</p><ol><li class="lvl-3"><p>SQL语句及索引的优化</p></li><li class="lvl-3"><p>数据库表结构的优化</p></li><li class="lvl-3"><p>系统配置的优化</p></li><li class="lvl-3"><p>硬件的优化</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建个人博客</title>
      <link href="/2023/07/30/hexo-github/"/>
      <url>/2023/07/30/hexo-github/</url>
      
        <content type="html"><![CDATA[<h2 id="拥有一个Github账号">拥有一个Github账号</h2><h3 id="创建仓库">创建仓库</h3><p><img src="/images/hexo+github/image-20230810194616812.png" alt="创建仓库"></p><blockquote><p>创建一个名为<code>用户名.github.io</code>的仓库，使用小写用户名。因为我这里创建过了，所以显示已存在</p></blockquote><p><img src="/images/hexo+github/image-20230810194733661.png" alt="仓库名称"></p><h3 id="生成连接Github的密钥">生成连接Github的密钥</h3><p>在终端中输入以下命令根据提示生成公钥和密钥</p><pre class=" language-shell"><code class="language-shell">ssh-keygen -t rsa -C "GitHub注册邮箱"</code></pre><p>直接回车默认它的选项就会在C盘的Users\计算机用户名\.ssh下生成<code>id_rsa.pub</code>文件为公钥</p><p><img src="/images/hexo+github/image-20230731100536039.png" alt="公钥存放路径"></p><p>在个人设置界面找到<code>SSH and GPG keys</code>，新建一个SSH key</p><p><img src="/images/hexo+github/image-20230731100044379.png" alt="SSH and GPG keys"></p><p>使用记事本打开刚刚的<code>id_rsa.pub</code>文件，将其中的内容全部粘贴到<code>key</code>中，<code>titlle</code>任意</p><p>在终端中使用该命令查看是否连接成功</p><pre class=" language-shell"><code class="language-shell">ssh git@github.com</code></pre><p><img src="/images/hexo+github/image-20230731101312053.png" alt="成功提示"></p><h2 id="安装Git">安装Git</h2><p>一直下一步安装即可:<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">Git - 安装 Git</a></p><h3 id="配置基本信息">配置基本信息</h3><pre class=" language-shell"><code class="language-shell">git config --global user.name "GitHub用户名"git config --global user.email "GitHub注册邮箱"</code></pre><h2 id="安装Nodejs">安装Nodejs</h2><p>在这里有写就不再这里赘述：<a href="https://wisansiiz.top/2023/07/29/nodejs-an-zhuang-jiao-cheng/">Nodejs安装教程</a></p><h3 id="安装hexo">安装hexo</h3><p>使用安装的nodejs中的<code>npm</code>命令来安装<code>hexo</code></p><pre class=" language-shell"><code class="language-shell">npm install -g hexo-cli</code></pre><p>创建一个空文件夹来存放你的blog项目，在空文件下执行下面命令：</p><pre class=" language-shell"><code class="language-shell">hexo init myBlog</code></pre><p>该命令会在当前目录下创建一个名为myBlog的文件夹存放初始化博客项目</p><p>接下来就可以使用命令将他启动，使用<code>hexo s -p 端口号</code>可以在指定的端口上生成项目，默认为4000</p><pre class=" language-shell"><code class="language-shell">cd myBloghexo cleanhexo g # generate 生成hexo s # server 启动服务</code></pre><p>这时在浏览器打开<code>localhost:4000</code>就能查看到博客了</p><img src="/images/hexo+github/image-20230731141648325.png" alt="默认样式" style="zoom: 67%;"><h3 id="安装主题">安装主题</h3><p>这时你可能就会发现默认的博客样式相当的简陋，这时候我们就需要为hexo安装主题</p><p>你可以在github上寻找你想要的主题或者是在hexo的<a href="https://hexo.io/themes/">主题官网</a>上寻找你想要的主题</p><p>这里我们以比较流行的<code>hexo-theme-matery</code>主题作为例子演示</p><p>通过git命令将主题的github仓库克隆到<code>themes</code>文件夹下：</p><pre class=" language-shell"><code class="language-shell">git clone https://github.com/blinkfox/hexo-theme-matery.git themes/hexo-theme-matery</code></pre><p>下载好主题后想要应用主题需要到<code>myBlog</code>文件夹下的<code>_config.yml</code>中将<code>landscape</code>修改为<code>hexo-theme-matery</code></p><p><img src="/images/hexo+github/image-20230731142811191.png" alt="选择主题"></p><p>这时我们重新执行下面老三样命令，重新部署项目</p><pre class=" language-shell"><code class="language-shell">hexo cleanhexo ghexo s</code></pre><blockquote><p>注意：在本地部署测试时你可以不需要重启项目直接修改配置文件的内容就能够应用你刚刚修改的操作，但是在接下来要讲到的在github上部署时最好执行上述的<code>hexo clean</code>和<code>hexo g</code>命令以确保清理缓存重新部署项目，防止出现明明本地没问题而云端却出错的情况。</p></blockquote><p>此时重新打开浏览器你就会发现出现漂亮的主题了</p><img src="/images/hexo+github/image-20230731143843978.png" alt="主题页面展示" style="zoom:67%;"><p>该主题的相关配置在作者的github以及博客中都有较为详细的说明<a href="https://github.com/blinkfox/hexo-theme-matery">主题GitHub</a>，<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#!">主题博客</a></p><h2 id="项目部署">项目部署</h2><p>上面说了这么多，那么如何将项目部署到GitHub上跑起来呢</p><h3 id="修改配置文件">修改配置文件</h3><p>在hexo的主目录下的配置文件<code>_config.yml</code>中修改<code>deploy</code>选项</p><p><img src="/images/hexo+github/image-20230731145914081.png" alt="部署GitHub的配置"></p><img src="/images/hexo+github/image-20230731150401966.png" alt="ssh链接" style="zoom:80%;"><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 填写你创建的 用户名.github.io 仓库的链接</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master <span class="token comment" spellcheck="true"># git的分支</span></code></pre><h4 id="使用命令推送">使用命令推送</h4><p>在myBlog文件夹下安装推送插件否则可能会出现<code>ERROR Deployer not found: git</code></p><pre class=" language-shell"><code class="language-shell">npm install hexo-deployer-git --save</code></pre><p>修改完毕后使用命令将项目部署到GitHub，这里使用<code>hexo d</code>将项目推送到GitHub上</p><pre class=" language-shell"><code class="language-shell">hexo cleanhexo g # generate 生成hexo d # deploy 部署</code></pre><p>等待部署完成，通过 <code>用户名.github.io</code> 的网址就能访问到和本地预览一样的博客了</p><h2 id="域名绑定">域名绑定</h2><h3 id="本地操作">本地操作</h3><p>如果你想要通过自己购入的域名访问该网址而不使用<code>.github.io</code>的形式访问那么就需要进行域名绑定</p><p>在myBlog的主文件夹下找到<code>source</code>文件夹在此处创建一个名为<code>CNAME</code>的文件，注意文件如下图所示，<strong>没有后缀，没有后缀，没有后缀</strong>！</p><p><img src="/images/hexo+github/image-20230803094251117.png" alt="存放域名的文件"></p><p>打开它在里面填入你的域名，如果你这里使用的是顶级域名那么你能使用它直接访问，如果使用子域名那么必须输入对应的子域名才能访问</p><blockquote><p>该步骤是将每次推送到GitHub上时让<code>GitHub Pages</code>能够自动绑定域名，要不然每次推送都要手动重新到仓库设置中绑定域名（domain）</p><p>添加完该文件要推送一次，将该文件更新到GitHub，请执行<a href="#%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E6%8E%A8%E9%80%81">使用命令推送</a>中使用的三个命令进行操作</p></blockquote><h3 id="域名解析">域名解析</h3><p>如何让别人访问你的域名的时候网络能够知道你访问的是<code>用户名.github.io</code>你的网址，这时候就需要CDN域名解析，在你购买域名的服务商那里解析域名，绑定两个参数，这里以<strong>腾讯云</strong>为例<del>，记录类型A的记录值填你<code>ping 用户名.github.io</code>返回得到的ip地址</del>，记录类型CNAME主机记录填写www(其他的也都可以)，记录值填<code>用户名.github.io</code>。</p><img src="/images/hexo+github/image-20230803100322982.png" alt="域名解析配置" style="zoom:80%;"><p>绑定成功后等待一段时间就能通过的配置的域名访问该博客</p><div class="warning"><p>在腾讯云下域名解析的CNAME主机名为二级域名地址，如果你在上述部署到Github的CNAME文件中填写的是二级域名如 <code>blog.xxx.com</code> 那么在解析时也要填写对应的二级域名即主机记录为blog</p></div>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs安装教程</title>
      <link href="/2023/07/29/nodejs-an-zhuang-jiao-cheng/"/>
      <url>/2023/07/29/nodejs-an-zhuang-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1>Nodejs</h1><h3 id="下载">下载</h3><p>下载地址：<a href="https://nodejs.org/zh-cn/download"> Node.js (nodejs.org)</a></p><img src="/images/Nodejs安装教程/image-20230729135801511.png" alt="image-20230729135801511" style="zoom:80%;"><p>下载对应版本即可</p><h3 id="安装">安装</h3><p>选择安装路径：</p><img src="/images/Nodejs安装教程/image-20230729140313138.png" alt="image-20230729140313138" style="zoom:80%;"><p>在任何位置打开终端输入<code>node -v</code>出现版本号表示安装成功，查看npm是否安装成功<code>npm -v</code></p><p><img src="/images/Nodejs%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/image-20230729140955297.png" alt="image-20230729140955297"></p><h4 id="问题">问题</h4><p>若未正常显示则需手动添加环境变量，搜索环境变量打开</p><img src="/images/Nodejs安装教程/image-20230729141414602.png" alt="image-20230729141414602" style="zoom: 67%;"><img src="/images/Nodejs安装教程/image-20230729141750966.png" alt="image-20230729141750966" style="zoom:67%;"><img src="/images/Nodejs安装教程/image-20230729141718857.png" alt="image-20230729141718857" style="zoom:80%;"><p>进入编辑新建中添加刚刚的安装路径</p><img src="/images/Nodejs安装教程/image-20230729141955472.png" alt="image-20230729141955472" style="zoom: 67%;"><h3 id="修改npm的下载位置">修改npm的下载位置</h3><p>在刚刚的安装路径下创建两个文件夹<code>ndoe_cache</code>和<code>node_global</code></p><p><img src="/images/Nodejs%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/image-20230729142502065.png" alt="image-20230729142502065"></p><p>设置全局模块的安装路径到 “node_global” 文件夹</p><pre class=" language-shell"><code class="language-shell">npm config set prefix "D:\nodejs\node_global"</code></pre><p>设置缓存到 “node_cache” 文件夹</p><pre class=" language-shell"><code class="language-shell">npm config set cache "D:\nodejs\node_cache"</code></pre><p>将全局模块安装路径添加到环境变量</p><img src="/images/Nodejs安装教程/image-20230729142912612.png" alt="image-20230729142912612" style="zoom:67%;"><p>通过下面的命令查看是否修改成功</p><pre class=" language-shell"><code class="language-shell">npm get prefixnpm get cache</code></pre><p><img src="/images/Nodejs%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/image-20230729143203332.png" alt="image-20230729143203332"></p><h3 id="修改文件夹权限">修改文件夹权限</h3><p>修改<code>node_global</code>文件夹的权限编辑属性，</p><p>如果不进行这一步那么使用npm命令就必须使用<strong>管理员权限</strong>打开终端，才能使用<code>npm</code>命令</p><img src="/images/Nodejs安装教程/image-20230729143628296.png" alt="image-20230729143628296" style="zoom: 80%;"><img src="/images/Nodejs安装教程/image-20230729143639973.png" alt="image-20230729143639973" style="zoom: 80%;"><p>本文章参考自：<a href="https://blog.csdn.net/qq_42006801/article/details/124830995">Node.js安装与配置（详细步骤）_nodejs安装及环境配置</a></p><p>仅供自己留做存档用</p>]]></content>
      
      
      <categories>
          
          <category> ndoejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go后端框架</title>
      <link href="/2023/07/28/go-hou-duan-kuang-jia/"/>
      <url>/2023/07/28/go-hou-duan-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1>Go</h1><h2 id="Gin">Gin</h2><h3 id="安装gin">安装gin</h3><pre class=" language-shell"><code class="language-shell">go get -u github.com/gin-gonic/gin</code></pre><p>例子</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"github.com/gin-gonic/gin"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>context<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"你好，世界"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":9090"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"github.com/gin-gonic/gin"</span><span class="token keyword">func</span> <span class="token function">Index</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>context<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"你好，世界"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">,</span> Index<span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":9090"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="Gorm">Gorm</h2><h3 id="连接数据库">连接数据库</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"database/sql"</span><span class="token string">"fmt"</span><span class="token string">"gorm.io/driver/mysql"</span><span class="token string">"gorm.io/gorm"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 参考 https://github.com/go-sql-driver/mysql#dsn-data-source-name 获取详情</span>dsn <span class="token operator">:=</span> <span class="token string">"root:root@tcp(127.0.0.1:3306)/go_db?charset=utf8mb4&amp;parseTime=True&amp;loc=Local"</span>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"连接失败"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>sqlDB<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 方法结束后执行，关闭连接池</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span>sqlDB <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">{</span>err <span class="token operator">:=</span> sqlDB<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"关闭失败"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span>sqlDB<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 关闭链接</span><span class="token comment" spellcheck="true">// 设置连接池参数</span>sqlDB<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">// SetMaxIdleConns 设置空闲连接池中的最大连接数</span>sqlDB<span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// SetMaxOpenConns 设置数据库的最大打开连接数</span>sqlDB<span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// SetConnMaxLifetime 设置连接可重用的最大时间量</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO </tag>
            
            <tag> 后端框架 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
