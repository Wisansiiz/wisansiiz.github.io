<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java开发知识点</title>
      <link href="/2023/08/03/java-kai-fa-zhi-shi-dian/"/>
      <url>/2023/08/03/java-kai-fa-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<h2 id="java基础">java基础</h2>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建个人博客</title>
      <link href="/2023/07/30/hexo-github/"/>
      <url>/2023/07/30/hexo-github/</url>
      
        <content type="html"><![CDATA[<h2 id="拥有一个Github账号">拥有一个Github账号</h2><h3 id="创建仓库">创建仓库</h3><p>创建一个名为<code>用户名.github.io</code>的仓库</p><p>注意：使用小写用户名</p><h3 id="生成连接Github的密钥">生成连接Github的密钥</h3><p>在终端中输入以下命令根据提示生成公钥和密钥</p><pre class=" language-shell"><code class="language-shell">ssh-keygen -t rsa -C "GitHub注册邮箱"</code></pre><p>在C盘的Users\计算机用户名\.ssh下会生成<code>id_rsa.pub</code>文件为公钥</p><p><img src="/images/hexo+github/image-20230731100536039.png" alt=""></p><p>在个人设置界面找到<code>SSH and GPG keys</code>，新建一个SSH key</p><p><img src="/images/hexo+github/image-20230731100044379.png" alt=""></p><p>打开刚刚的<code>id_rsa.pub</code>文件，将其中的内容全部粘贴到<code>key</code>中，<code>titlle</code>任意</p><p>在终端中使用该命令查看是否连接成功</p><pre class=" language-shell"><code class="language-shell">ssh git@github.com</code></pre><p><img src="/images/hexo+github/image-20230731101312053.png" alt=""></p><h2 id="安装Git">安装Git</h2><h3 id="配置基本信息">配置基本信息</h3><pre class=" language-shell"><code class="language-shell">git config --global username "GitHub用户名"git config --global useremail "GitHub注册邮箱"</code></pre><h2 id="安装Nodejs">安装Nodejs</h2><p>在这里有写就不再这里赘述：<a href="https://wisansiiz.top/2023/07/29/nodejs-an-zhuang-jiao-cheng/">Nodejs安装教程</a></p><h3 id="安装hexo">安装hexo</h3><p>使用安装的nodejs中的<code>npm</code>命令来安装<code>hexo</code></p><pre class=" language-shell"><code class="language-shell">npm install -g hexo-cli</code></pre><p>创建一个空文件夹来存放你的blog项目，在空文件下执行下面命令：</p><pre class=" language-shell"><code class="language-shell">hexo init myBlog</code></pre><p>该命令会在当前目录下创建一个名为myBlog的文件夹存放初始化博客项目</p><p>接下来就可以使用命令将他启动，使用<code>hexo s -p 端口号</code>可以在指定的端口上生成项目，默认为4000</p><pre class=" language-shell"><code class="language-shell">cd myBloghexo cleanhexo g # generate 生成hexo s # server 启动服务</code></pre><p>这时在浏览器打开<code>localhost:4000</code>就能查看到博客了</p><img src="/images/hexo+github/image-20230731141648325.png" alt="默认样式" style="zoom: 67%;"><h3 id="安装主题">安装主题</h3><p>这时你可能就会发现默认的博客样式相当的简陋，这时候我们就需要为hexo安装主题</p><p>你可以在github上寻找你想要的主题或者是在hexo的<a href="https://hexo.io/themes/">主题官网</a>上寻找你想要的主题</p><p>这里我们以比较流行的<code>hexo-theme-matery</code>主题作为例子演示</p><p>通过git命令将主题的github仓库克隆到<code>themes</code>文件夹下：</p><pre class=" language-shell"><code class="language-shell">git clone https://github.com/blinkfox/hexo-theme-matery.git themes/hexo-theme-matery</code></pre><p>下载好主题后想要应用主题需要到<code>myBlog</code>文件夹下的<code>_config.yml</code>中将<code>landscape</code>修改为<code>hexo-theme-matery</code></p><p><img src="/images/hexo+github/image-20230731142811191.png" alt=""></p><p>这时我们重新执行下面老三样命令，重新部署项目</p><pre class=" language-shell"><code class="language-shell">hexo cleanhexo ghexo s</code></pre><blockquote><p>注意：在本地部署测试时你可以不需要重启项目直接修改配置文件的内容就能够应用你刚刚修改的操作，但是在接下来要讲到的在github上部署时最好执行上述的<code>hexo clean</code>和<code>hexo g</code>命令以确保清理缓存重新部署项目，防止出现明明本地没问题而云端却出错的情况。</p></blockquote><p>此时重新打开浏览器你就会发现出现漂亮的主题了</p><img src="/images/hexo+github/image-20230731143843978.png" alt="主题页面展示" style="zoom:67%;"><p>该主题的相关配置在作者的github以及博客中都有较为详细的说明<a href="https://github.com/blinkfox/hexo-theme-matery">主题GitHub</a>，<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#!">主题博客</a></p><h2 id="项目部署">项目部署</h2><p>上面说了这么多，那么如何将项目部署到GitHub上跑起来呢</p><h3 id="修改配置文件">修改配置文件</h3><p>在hexo的主目录下的配置文件<code>_config.yml</code>中修改<code>deploy</code>选项</p><p><img src="/images/hexo+github/image-20230731145914081.png" alt=""></p><img src="/images/hexo+github/image-20230731150401966.png" alt="ssh链接" style="zoom:80%;"><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 填写你创建的 用户名.github.io 仓库的链接</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master <span class="token comment" spellcheck="true"># git的分支</span></code></pre><h4 id="使用命令推送">使用命令推送</h4><p>修改完毕后使用命令将项目部署到GitHub，这里使用<code>hexo d</code>将项目推送到GitHub上</p><pre class=" language-shell"><code class="language-shell">hexo cleanhexo g # generate 生成hexo d # deploy 部署</code></pre><p>等待部署完成，通过 <code>用户名.github.io</code> 的网址就能访问到和本地预览一样的博客了</p><h2 id="域名绑定">域名绑定</h2><h3 id="本地操作">本地操作</h3><p>如果你想要通过自己购入的域名访问该网址而不使用<code>.github.io</code>的形式访问那么就需要进行域名绑定</p><p>在myBlog的主文件夹下找到<code>source</code>文件夹在此处创建一个名为<code>CNAME</code>的文件，注意文件如下图所示，<strong>没有后缀，没有后缀，没有后缀</strong>！</p><p><img src="/images/hexo+github/image-20230803094251117.png" alt=""></p><p>打开它在里面填入你的域名，如果你这里使用的是顶级域名那么你能使用它直接访问，如果使用子域名那么必须输入对应的子域名才能访问</p><blockquote><p>该步骤是将每次推送到GitHub上时让<code>GitHub Pages</code>能够自动绑定域名，要不然每次推送都要手动重新到仓库设置中绑定域名（domain）</p><p>添加完该文件要推送一次，将该文件更新到GitHub，请执行<a href="#使用命令推送" target="_self">使用命令推送</a>中使用的三个命令进行操作</p></blockquote><h3 id="域名解析">域名解析</h3><p>如何让别人访问你的域名的时候网络能够知道你访问的是<code>用户名.github.io</code>你的网址，这时候就需要CDN域名解析，在你购买域名的服务商那里解析域名，绑定两个参数，这里以<strong>腾讯云</strong>为例，记录类型A的记录值填你<code>ping 用户名.github.io</code>返回得到的ip地址，记录类型CNAME主机记录填写www(其他的应该也都可以)，记录值填<code>用户名.github.io</code>。不知道是否有其他方法，但是像我这么填是可以的</p><img src="/images/hexo+github/image-20230803100322982.png" alt="域名解析配置" style="zoom:80%;"><p>绑定成功后等待一段时间就能通过的配置的域名访问该博客</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs安装教程</title>
      <link href="/2023/07/29/nodejs-an-zhuang-jiao-cheng/"/>
      <url>/2023/07/29/nodejs-an-zhuang-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1>Nodejs</h1><h3 id="下载">下载</h3><p>下载地址：<a href="https://nodejs.org/zh-cn/download"> Node.js (nodejs.org)</a></p><img src="/images/Nodejs安装教程.assets/image-20230729135801511.png" alt="image-20230729135801511" style="zoom:80%;"><p>下载对应版本即可</p><h3 id="安装">安装</h3><p>选择安装路径：</p><img src="/images/Nodejs安装教程.assets/image-20230729140313138.png" alt="image-20230729140313138" style="zoom:80%;"><p>在任何位置打开终端输入<code>node -v</code>出现版本号表示安装成功，查看npm是否安装成功<code>npm -v</code></p><p><img src="/images/Nodejs%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B.assets/image-20230729140955297.png" alt=""></p><h4 id="问题">问题</h4><p>若未正常显示则需手动添加环境变量，搜索环境变量打开</p><img src="/images/Nodejs安装教程.assets/image-20230729141414602.png" alt="image-20230729141414602" style="zoom: 67%;"><img src="/images/Nodejs安装教程.assets/image-20230729141750966.png" alt="image-20230729141750966" style="zoom:67%;"><img src="/images/Nodejs安装教程.assets/image-20230729141718857.png" alt="image-20230729141718857" style="zoom:80%;"><p>进入编辑新建中添加刚刚的安装路径</p><img src="/images/Nodejs安装教程.assets/image-20230729141955472.png" alt="image-20230729141955472" style="zoom: 67%;"><h3 id="修改npm的下载位置">修改npm的下载位置</h3><p>在刚刚的安装路径下创建两个文件夹<code>ndoe_cache</code>和<code>node_global</code></p><p><img src="/images/Nodejs%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B.assets/image-20230729142502065.png" alt=""></p><p>设置全局模块的安装路径到 “node_global” 文件夹</p><pre class=" language-shell"><code class="language-shell">npm config set prefix "D:\nodejs\node_global"</code></pre><p>设置缓存到 “node_cache” 文件夹</p><pre class=" language-shell"><code class="language-shell">npm config set cache "D:\nodejs\node_cache"</code></pre><p>将全局模块安装路径添加到环境变量</p><img src="/images/Nodejs安装教程.assets/image-20230729142912612.png" alt="image-20230729142912612" style="zoom:67%;"><p>通过下面的命令查看是否修改成功</p><pre class=" language-shell"><code class="language-shell">npm get prefixnpm get cache</code></pre><p><img src="/images/Nodejs%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B.assets/image-20230729143203332.png" alt=""></p><h3 id="修改文件夹权限">修改文件夹权限</h3><p>修改<code>node_global</code>文件夹的权限编辑属性，</p><p>如果不进行这一步那么使用npm命令就必须使用<strong>管理员权限</strong>打开终端，才能使用<code>npm</code>命令</p><img src="/images/Nodejs安装教程.assets/image-20230729143628296.png" alt="image-20230729143628296" style="zoom: 80%;"><img src="/images/Nodejs安装教程.assets/image-20230729143639973.png" alt="image-20230729143639973" style="zoom: 80%;"><p>本文章参考自：<a href="https://blog.csdn.net/qq_42006801/article/details/124830995">Node.js安装与配置（详细步骤）_nodejs安装及环境配置</a></p><p>仅供自己留做存档用</p>]]></content>
      
      
      <categories>
          
          <category> ndoejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go后端框架</title>
      <link href="/2023/07/28/go-hou-duan-kuang-jia/"/>
      <url>/2023/07/28/go-hou-duan-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1>Go</h1><h2 id="Gin">Gin</h2><h3 id="安装gin">安装gin</h3><pre class=" language-shell"><code class="language-shell">go get -u github.com/gin-gonic/gin</code></pre><p>例子</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"github.com/gin-gonic/gin"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>context<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"你好，世界"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":9090"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"github.com/gin-gonic/gin"</span><span class="token keyword">func</span> <span class="token function">Index</span><span class="token punctuation">(</span>context <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>context<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"你好，世界"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">,</span> Index<span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":9090"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="Gorm">Gorm</h2><h3 id="连接数据库">连接数据库</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"database/sql"</span><span class="token string">"fmt"</span><span class="token string">"gorm.io/driver/mysql"</span><span class="token string">"gorm.io/gorm"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 参考 https://github.com/go-sql-driver/mysql#dsn-data-source-name 获取详情</span>dsn <span class="token operator">:=</span> <span class="token string">"root:root@tcp(127.0.0.1:3306)/go_db?charset=utf8mb4&amp;parseTime=True&amp;loc=Local"</span>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>mysql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>dsn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"连接失败"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>sqlDB<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 方法结束后执行，关闭连接池</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span>sqlDB <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">{</span>err <span class="token operator">:=</span> sqlDB<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"关闭失败"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span>sqlDB<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 关闭链接</span><span class="token comment" spellcheck="true">// 设置连接池参数</span>sqlDB<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">// SetMaxIdleConns 设置空闲连接池中的最大连接数</span>sqlDB<span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// SetMaxOpenConns 设置数据库的最大打开连接数</span>sqlDB<span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// SetConnMaxLifetime 设置连接可重用的最大时间量</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO </tag>
            
            <tag> 后端框架 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
